import groovy.json.JsonOutput

task generateTerraformTFVarsJson {
    inputs.property("GLOBAL_PREFIX", globalPrefix)
    inputs.property("STAGE_NAME", stageName)
    inputs.property("AWS_ACCOUNT_ID", awsAccountId)
    inputs.property("AWS_ACCESS_KEY", awsAccessKey)
    inputs.property("AWS_SECRET_KEY", awsSecretKey)
    inputs.property("AWS_REGION", awsRegion)
    inputs.property("AWS_CODE_COMMIT_USERNAME", awsCodeCommitUsername)
    inputs.property("AWS_CODE_COMMIT_PASSWORD", awsCodeCommitPassword)

    def propertyFile = file("${projectDir}/terraform.tfvars.json")

    outputs.file(propertyFile)
    doLast {
        def data = [
            global_prefix           : globalPrefix,
            project_prefix          : "${globalPrefix}.launch-control.${stageName}",
            stage_name              : stageName,
            aws_account_id          : awsAccountId,
            aws_access_key          : awsAccessKey,
            aws_secret_key          : awsSecretKey,
            aws_region              : awsRegion,
            aws_code_commit_username: awsCodeCommitUsername,
            aws_code_commit_password: awsCodeCommitPassword
        ]

        def json = JsonOutput.toJson(data)
        def jsonPretty = JsonOutput.prettyPrint(json)

        propertyFile.write(jsonPretty)
    }
}

task generateWebsiteFilesTfJson {
    dependsOn ":build"

    def websiteDir = file("../website/dist")
    inputs.dir websiteDir

    def websiteFileTfJson = file("website_files.tf.json")
    outputs.file websiteFileTfJson

    doLast {
        def aws_s3_bucket_object = []
        def resource = ["aws_s3_bucket_object": aws_s3_bucket_object]
        def data = ["resource": resource]

        websiteDir.traverse { f ->
            if (f.isFile()) {
                def mimeType
                if (f.path.endsWith(".html")) {
                    mimeType = "text/html"
                } else if (f.path.endsWith(".css")) {
                    mimeType = "text/css"
                } else if (f.path.endsWith(".js")) {
                    mimeType = "application/javascript"
                } else if (f.path.endsWith(".json")) {
                    mimeType = "application/json"
                } else if (f.path.endsWith(".ico")) {
                    mimeType = "image/x-icon"
                } else if (f.path.endsWith(".txt")) {
                    mimeType = "text/plain"
                } else if (f.path.endsWith(".svg")) {
                    mimeType = "image/svg+xml"
                } else if (f.path.endsWith(".png")) {
                    mimeType = "image/png"
                } else if (f.path.endsWith(".woff")) {
                    mimeType = "font/woff"
                } else if (f.path.endsWith(".woff2")) {
                    mimeType = "font/woff2"
                } else if (f.path.endsWith(".eot")) {
                    mimeType = "application/vnd.ms-fontobject"
                } else if (f.path.endsWith(".ttf")) {
                    mimeType = "font/ttf"
                } else {
                    mimeType = "application/octet-stream"
                }

                def relativePath = websiteDir.relativePath(f).toString()
                def props = [
                    bucket      : "\${aws_s3_bucket.website.bucket}",
                    key         : relativePath,
                    source      : f.path.replace("\\", "/"),
                    content_type: mimeType,
                    etag        : "\${filemd5(\"${f.path.replace("\\", "/")}\")}"
                ]

                def filename = "file_${relativePath.replaceAll("[^a-zA-Z0-9]", "_")}"
                def object = [
                    "${filename}": props,
                ]

                aws_s3_bucket_object.add(object)
            }
        }

        def json = JsonOutput.toJson(data)
        def jsonPretty = JsonOutput.prettyPrint(json)

        websiteFileTfJson.write(jsonPretty)
    }
}

task generateRepositoryFilesTfJson {
    dependsOn ":build"

    def repositoryDir = file("../repository/build/dist")
    inputs.dir repositoryDir

    def repositoryFileTfJson = file("repository_files.tf.json")
    outputs.file repositoryFileTfJson

    doLast {
        def aws_s3_bucket_object = []
        def resource = ["aws_s3_bucket_object": aws_s3_bucket_object]
        def data = ["resource": resource]

        repositoryDir.traverse { f ->
            if (f.isFile()) {
                def mimeType
                if (f.path.endsWith(".html")) {
                    mimeType = "text/html"
                } else if (f.path.endsWith(".css")) {
                    mimeType = "text/css"
                } else if (f.path.endsWith(".js")) {
                    mimeType = "application/javascript"
                } else if (f.path.endsWith(".json")) {
                    mimeType = "application/json"
                } else if (f.path.endsWith(".ico")) {
                    mimeType = "image/x-icon"
                } else if (f.path.endsWith(".txt")) {
                    mimeType = "text/plain"
                } else if (f.path.endsWith(".svg")) {
                    mimeType = "image/svg+xml"
                } else if (f.path.endsWith(".png")) {
                    mimeType = "image/png"
                } else if (f.path.endsWith(".woff")) {
                    mimeType = "font/woff"
                } else if (f.path.endsWith(".woff2")) {
                    mimeType = "font/woff2"
                } else if (f.path.endsWith(".eot")) {
                    mimeType = "application/vnd.ms-fontobject"
                } else if (f.path.endsWith(".ttf")) {
                    mimeType = "font/ttf"
                } else {
                    mimeType = "application/octet-stream"
                }

                def relativePath = repositoryDir.relativePath(f).toString()
                def props = [
                    bucket      : "\${aws_s3_bucket.repository.bucket}",
                    key         : relativePath,
                    source      : f.path.replace("\\", "/"),
                    content_type: mimeType,
                    etag        : "\${filemd5(\"${f.path.replace("\\", "/")}\")}"
                ]

                def filename = "file_${relativePath.replaceAll("[^a-zA-Z0-9]", "_")}"
                def object = [
                    "${filename}": props,
                ]

                aws_s3_bucket_object.add(object)
            }
        }

        def json = JsonOutput.toJson(data)
        def jsonPretty = JsonOutput.prettyPrint(json)

        repositoryFileTfJson.write(jsonPretty)
    }
}

task generateAwsCredentialsJson {
    inputs.property("AWS_ACCESS_KEY", awsAccessKey)
    inputs.property("AWS_SECRET_KEY", awsSecretKey)
    inputs.property("AWS_REGION", awsRegion)

    def awsCredentialsJson = file("aws-credentials.json")
    outputs.file(awsCredentialsJson)

    doLast {
        def data = [
            accessKeyId    : awsAccessKey,
            secretAccessKey: awsSecretKey,
            region         : awsRegion
        ]

        def json = JsonOutput.toJson(data)
        def jsonPretty = JsonOutput.prettyPrint(json)

        awsCredentialsJson.write(jsonPretty)
    }
}

task terraformInit(type: Exec) {
    dependsOn ":verifyTerraform"
    inputs.file "main.tf"
    outputs.upToDateWhen { file(".terraform").exists() }
    commandLine terraformExecutable
    args "init"
}

task terraformValidate(type: Exec) {
    dependsOn ":verifyTerraform"
    dependsOn ":build"
    dependsOn terraformInit
    dependsOn generateTerraformTFVarsJson
    dependsOn generateWebsiteFilesTfJson
    dependsOn generateRepositoryFilesTfJson
    commandLine terraformExecutable
    args "validate"
}

task terraformPlan(type: Exec) {
    dependsOn ":verifyTerraform"
    dependsOn ":build"
    dependsOn terraformInit
    dependsOn generateTerraformTFVarsJson
    dependsOn generateWebsiteFilesTfJson
    dependsOn generateRepositoryFilesTfJson
    commandLine terraformExecutable
    args "plan"
}

task terraformApply(type: Exec) {
    dependsOn ":verifyTerraform"
    dependsOn ":build"
    dependsOn terraformInit
    dependsOn generateTerraformTFVarsJson
    dependsOn generateWebsiteFilesTfJson
    dependsOn generateRepositoryFilesTfJson
    commandLine terraformExecutable
    args "apply", "-auto-approve"
}

task terraformDestroy(type: Exec) {
    dependsOn ":verifyTerraform"
    dependsOn terraformInit
    dependsOn generateTerraformTFVarsJson
    dependsOn generateWebsiteFilesTfJson
    dependsOn generateRepositoryFilesTfJson
    commandLine terraformExecutable
    args "destroy", "-force"
}

task terraformOutput(type: Exec) {
    dependsOn ":verifyTerraform"
    mustRunAfter terraformApply
    inputs.file("terraform.tfstate")
    outputs.file("terraform.output.json")
    commandLine terraformExecutable
    args "output", "-json"
    doFirst {
        standardOutput new FileOutputStream("${projectDir}/terraform.output.json")
    }
}

task runPostDeployScript(type: Exec) {
    dependsOn generateAwsCredentialsJson
    dependsOn terraformOutput
    dependsOn "post-deploy:npmInstall"
    inputs.file "terraform.output.json"
    inputs.file "./post-deploy/src/index.js"
    inputs.file "./post-deploy/package.json"
    outputs.upToDateWhen { false }
    commandLine nodeExecutable
    args "post-deploy/src/index.js", "${projectDir}/terraform.output.json"
}

clean {
    delete "${projectDir}/terraform.output.json"
    delete "${projectDir}/terraform.tfvars.json"
    delete "${projectDir}/aws-credentials.json"
    delete "${projectDir}/repository_files.tf.json"
    delete "${projectDir}/website_files.tf.json"
}

task plan {}
plan.dependsOn(terraformPlan)

task deploy {}
deploy.dependsOn(terraformApply)
deploy.dependsOn(runPostDeployScript)

task destroy {}
destroy.dependsOn(terraformDestroy)
