import groovy.json.JsonOutput

task generateTerraformTFVarsJson {
    inputs.property("ENVIRONMENT_NAME", "${environmentName}")
    inputs.property("ENVIRONMENT_TYPE", "${environmentType}")
    inputs.property("AWS_ACCOUNT_ID", "${awsAccountId}")
    inputs.property("AWS_ACCESS_KEY", "${awsAccessKey}")
    inputs.property("AWS_SECRET_KEY", "${awsSecretKey}")
    inputs.property("AWS_REGION", "${awsRegion}")
    inputs.property("AWS_CODE_COMMIT_USERNAME", "${awsCodeCommitUsername}")
    inputs.property("AWS_CODE_COMMIT_PASSWORD", "${awsCodeCommitPassword}")

    def propertyFile = file("${projectDir}/terraform.tfvars.json")

    outputs.file(propertyFile)
    doLast {
        def data = [
                global_prefix           : "${environmentName}.${environmentType}".replace(".", "-"),
                environment_name        : "${environmentName}",
                environment_type        : "${environmentType}",
                aws_account_id          : "${awsAccountId}",
                aws_access_key          : "${awsAccessKey}",
                aws_secret_key          : "${awsSecretKey}",
                aws_region              : "${awsRegion}",
                aws_code_commit_username: "${awsCodeCommitUsername}",
                aws_code_commit_password: "${awsCodeCommitPassword}"
        ]

        def json = JsonOutput.toJson(data)
        def jsonPretty = JsonOutput.prettyPrint(json)
        
        propertyFile.write(jsonPretty)
    }
}

task terraformInit(type: Exec) {
    inputs.file "main.tf"
    outputs.upToDateWhen { file(".terraform").exists() }
    commandLine terraformExecutable
    args "init"
}

task terraformPlan(type: Exec) {
    dependsOn ":build"
    dependsOn terraformInit
    dependsOn generateTerraformTFVarsJson
    commandLine terraformExecutable
    args "plan"
}

task terraformApply(type: Exec) {
    dependsOn ":build"
    dependsOn terraformInit
    dependsOn generateTerraformTFVarsJson
    commandLine terraformExecutable
    args "apply", "-auto-approve"
}

task terraformDestroy(type: Exec) {
    dependsOn terraformInit
    dependsOn generateTerraformTFVarsJson
    commandLine terraformExecutable
    args "destroy", "-force"
}

task terraformOutput(type: Exec) {
    mustRunAfter terraformApply
    inputs.file("terraform.tfstate")
    outputs.file("terraform.output")
    commandLine terraformExecutable
    args "output"
    doFirst {
        standardOutput new FileOutputStream("${projectDir}/terraform.output")
    }
}

clean {
    delete "${projectDir}/terraform.output"
}

task plan {}
plan.dependsOn(terraformPlan)

task deploy {}
deploy.dependsOn(terraformApply)

task destroy {}
destroy.dependsOn(terraformDestroy)
destroy.dependsOn(clean)