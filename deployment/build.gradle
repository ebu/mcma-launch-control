task generateTerraformTFVars {
    inputs.property("ENVIRONMENT_NAME", "${environmentName}")
    inputs.property("ENVIRONMENT_TYPE", "${environmentType}")
    inputs.property("AWS_ACCOUNT_ID", "${awsAccountId}")
    inputs.property("AWS_ACCESS_KEY", "${awsAccessKey}")
    inputs.property("AWS_SECRET_KEY", "${awsSecretKey}")
    inputs.property("AWS_REGION", "${awsRegion}")

    def propertyFile = file("${projectDir}/terraform.tfvars")

    outputs.file(propertyFile)
    doLast {
        def props = new Properties()    
        props.setProperty("global_prefix", ("\"${environmentName}.${environmentType}\"").replace(".", "-"))
        props.setProperty("environment_name", "\"${environmentName}\"")
        props.setProperty("environment_type", "\"${environmentType}\"")
        props.setProperty("aws_account_id", "\"${awsAccountId}\"")
        props.setProperty("aws_access_key", "\"${awsAccessKey}\"")
        props.setProperty("aws_secret_key", "\"${awsSecretKey}\"")
        props.setProperty("aws_region", "\"${awsRegion}\"")
        
        props.store(propertyFile.newWriter(), null)
    }
}

task terraformInit(type: Exec) {
    inputs.file "main.tf"
    outputs.upToDateWhen { file(".terraform").exists() }
    commandLine terraformExecutable
    args "init"
}

task terraformPlan(type: Exec) {
    dependsOn ":build"
    dependsOn terraformInit
    dependsOn generateTerraformTFVars
    commandLine terraformExecutable
    args "plan"
}

task terraformApply(type: Exec) {
    dependsOn ":build"
    dependsOn terraformInit
    dependsOn generateTerraformTFVars
    commandLine terraformExecutable
    args "apply", "-auto-approve"
}

task terraformDestroy(type: Exec) {
    dependsOn terraformInit
    dependsOn generateTerraformTFVars
    commandLine terraformExecutable
    args "destroy", "-force"
}

task terraformOutput(type: Exec) {
    mustRunAfter terraformApply
    inputs.file("terraform.tfstate")
    outputs.file("terraform.output")
    commandLine terraformExecutable
    args "output"
    doFirst {
        standardOutput new FileOutputStream("${projectDir}/terraform.output")
    }
}

clean {
    delete "${projectDir}/terraform.output"
}

task plan {}
plan.dependsOn(terraformPlan)

task deploy {}
deploy.dependsOn(terraformApply)

task destroy {}
destroy.dependsOn(terraformDestroy)
destroy.dependsOn(clean)